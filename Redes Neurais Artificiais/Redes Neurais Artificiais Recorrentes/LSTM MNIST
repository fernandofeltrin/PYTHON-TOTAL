import tensorflow as tf
from keras.layers import Input, Dense, LSTM, Dropout, TimeDistributed
from keras.models import Model
from keras.datasets import mnist
from keras.utils import to_categorical

(x_train, y_train), (x_test, y_test) = mnist.load_data()

x_train = x_train.astype('float32') / 255.
x_test = x_test.astype('float32') / 255.

y_train = to_categorical(y_train, 10)
y_test = to_categorical(y_test, 10)

x_train = x_train.reshape((-1,) + (28, 28))
x_test = x_test.reshape((-1,) + (28, 28))

inputs = Input(shape = (28, 28))
x = LSTM(units = 128,
         return_sequences = True)(inputs)
x = Dropout(0.2)(x)
x = LSTM(units = 64,
         return_sequences = True)(x)
x = Dropout(0.2)(x)
x = TimeDistributed(Dense(units = 32))(x)
x = LSTM(units = 32)(x)
x = Dropout(0.2)(x)
outputs = Dense(units = 10,
                activation = 'softmax')(x)

model = Model(inputs = inputs,
              outputs = outputs)

model.compile(loss = 'categorical_crossentropy',
              optimizer = 'adam',
              metrics = ['accuracy'])

model.fit(x_train,
          y_train,
          steps_per_epoch = 100,
          epochs = 50,
          validation_data = (x_test,
                             y_test))



