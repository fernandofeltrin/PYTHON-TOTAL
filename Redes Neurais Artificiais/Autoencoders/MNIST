import numpy as np
from tensorflow import keras
from tensorflow.keras import layers

(x_train, _), (x_test, _) = keras.datasets.mnist.load_data()

x_train = x_train.astype("float32") / 255.0
x_test = x_test.astype("float32") / 255.0

x_train = np.reshape(x_train, (len(x_train), 28, 28, 1))
x_test = np.reshape(x_test, (len(x_test), 28, 28, 1))

input_img = keras.Input(shape = (28, 28, 1))
x = layers.Conv2D(filters = 16,
                  kernel_size = (3, 3),
                  activation = "relu",
                  padding = "same")(input_img)
x = layers.MaxPooling2D(pool_size = (2, 2),
                        padding = "same")(x)
x = layers.Conv2D(filters = 8,
                  kernel_size = (3, 3),
                  activation = "relu",
                  padding = "same")(x)
x = layers.MaxPooling2D(pool_size = (2, 2),
                        padding = "same")(x)
x = layers.Conv2D(filters = 8,
                  kernel_size = (3, 3),
                  activation = "relu",
                  padding = "same")(x)
encoded = layers.MaxPooling2D(pool_size = (2, 2),
                              padding = "same")(x)
x = layers.Conv2D(filters = 8,
                  kernel_size = (3, 3),
                  activation = "relu",
                  padding = "same")(encoded)
x = layers.UpSampling2D((2, 2))(x)
x = layers.Conv2D(filters = 8,
                  kernel_size = (3, 3),
                  activation = "relu",
                  padding = "same")(x)
x = layers.UpSampling2D((2, 2))(x)
x = layers.Conv2D(filters = 16,
                  kernel_size = (3, 3),
                  activation = "relu")(x)
x = layers.UpSampling2D((2, 2))(x)
decoded = layers.Conv2D(filters = 1,
                        kernel_size = (3, 3),
                        activation = "sigmoid",
                        padding = "same")(x)

autoencoder = keras.Model(input_img, decoded)

autoencoder.compile(optimizer = "adam",
                    loss = "binary_crossentropy")

batch_size = 128
epochs = 10
autoencoder.fit(x_train,
                x_train,
                batch_size = batch_size,
                epochs = epochs,
                validation_data = (x_test,
                                   x_test))

decoded_imgs = autoencoder.predict(x_test)

import matplotlib.pyplot as plt

n = 10  # Número de imagens para visualizar
plt.figure(figsize=(20, 4))
for i in range(n):
    # Imagem original
    ax = plt.subplot(2, n, i + 1)
    plt.imshow(x_test[i].reshape(28, 28))
    plt.gray()
    ax.get_xaxis().set_visible(False)
    ax.get_yaxis().set_visible(False)

    # Imagem reconstruída
    ax = plt.subplot(2, n, i + 1 + n)
    plt.imshow(decoded_imgs[i].reshape(28, 28))
    plt.gray()
    ax.get_xaxis().set_visible(False)
    ax.get_yaxis().set_visible(False)
plt.show()



