import hashlib
import datetime

class Transacao:
    def __init__(self, remetente, destinatario, valor):
        self.remetente = remetente
        self.destinatario = destinatario
        self.valor = valor

    def __str__(self):
        return f"Remetente: {self.remetente}, Destinatário: {self.destinatario}, Valor: {self.valor}"

class Bloco:
    def __init__(self, indice, transacoes, hash_anterior=''):
        self.indice = indice
        self.timestamp = datetime.datetime.now()
        self.transacoes = transacoes
        self.hash_anterior = hash_anterior
        self.hash = self.calcular_hash()

    def calcular_hash(self):
        texto_para_hash = f"{self.indice}{self.timestamp}{str(self.transacoes)}{self.hash_anterior}"
        return hashlib.sha256(texto_para_hash.encode()).hexdigest()

    def __str__(self):
        return f"Índice: {self.indice}, Hash: {self.hash}, Transações: {', '.join(map(str, self.transacoes))}"

class Blockchain:
    def __init__(self):
        self.chain = [self.criar_bloco_genesis()]

    def criar_bloco_genesis(self):
        return Bloco(0, [], "0")

    def obter_ultimo_bloco(self):
        return self.chain[-1]

    def adicionar_transacao(self, remetente, destinatario, valor):
        transacao = Transacao(remetente, destinatario, valor)
        bloco_atual = self.obter_ultimo_bloco()
        bloco_atual.transacoes.append(transacao)

    def adicionar_bloco(self):
        indice = len(self.chain)
        hash_anterior = self.obter_ultimo_bloco().hash
        novo_bloco = Bloco(indice, self.obter_ultimo_bloco().transacoes, hash_anterior)
        self.chain.append(novo_bloco)

    def validar_cadeia(self):
        for i in range(1, len(self.chain)):
            bloco_atual = self.chain[i]
            bloco_anterior = self.chain[i - 1]

            # Verifica se o hash do bloco atual é válido
            if bloco_atual.hash != bloco_atual.calcular_hash():
                return False

            # Verifica se o hash anterior está correto
            if bloco_atual.hash_anterior != bloco_anterior.hash:
                return False
        return True
    
blockchain = Blockchain()

blockchain.adicionar_transacao("Alice", "Fernando", 4300)
blockchain.adicionar_transacao("Paulo", "Tânia", 160)
blockchain.adicionar_bloco()

blockchain.adicionar_transacao("Fernando", "Carine", 1435)
blockchain.adicionar_transacao("Fatima", "Alice", 3000)
blockchain.adicionar_bloco()

for bloco in blockchain.chain:
    print(f"Índice: {bloco.indice}, Hash: {bloco.hash}, Transações: {bloco.transacoes}")

for bloco in blockchain.chain:
    print(bloco)

if blockchain.validar_cadeia():
    print("A cadeia é válida.")
else:
    print("A cadeia não é válida.")








